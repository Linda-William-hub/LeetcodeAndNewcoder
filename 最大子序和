/*
题目描述:
  给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
*/
/*
  因为是连续的，所以结果只可能是从某个位置到某个位置

  集合划分-子问题: 计算从 0 到 i，包含第i的位置的最大连续子序列
  结果分类:
  	两类: 1）包含 i 且包含前面连续子序列的
	      2）只包含 i 的 
			
  无论哪种情况，它都包含nums[i] 所以它参与后面计算
  但是前面到底连续有多长，它不知道 
  
  每个位置(包含它本身)的最大连续子序列都算出来了，最大也在里面
  所以最后求他们的最大值
*/
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int i;
        int maximum;
        int n = nums.size();
        if (n == 1)
            return nums[0];

        vector<int> f(n, 0);
        for (i = 0; i < n; i++)  //求每一类的最大值 
        {
            if (i == 0)
            	f[i] = nums[i];
            else
		f[i] = max(f[i - 1] + nums[i], nums[i]); 
        }
        //遍历一边找最大值 
        maximum = f[0];
        for (i = 1; i < n; i++)
	{
	    if (f[i] > maximum)
	    	maximum = f[i];
	} 
        return maximum;
    }
};
